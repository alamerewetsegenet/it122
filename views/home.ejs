<html>
<head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width">
<title>React App Demo</title>
<script src="https://unpkg.com/react@18/umd/react.development.js"></script>
<script src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script> 
 <!-- Don't use this in production:  -->
<script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
</head>
<body> 

<h2></h2>
<div id="root"></div>
<script type="text/babel">
      const divStyle = { color: 'blue', backgroundColor: 'yellow' };

// return a list of cars
const Car = (props) => {
  // props.data is an array
  const listItems = props.data.map((item) => (
    <li key={item._id} id={item._id} onClick={props.clickHandler}>
      {item.make}
    </li>
  ));
  return <ul>{listItems}</ul>;
};

const ItemDetail = (props) => {
  return <div>
      <hr />
      <h3>Car Details</h3>
      <form>
        Make:  <input type="text" name="make" value={props.item.make || ""} onChange={props.handleChange} /><br />
        Model: <input type="text" name="model" value={props.item.model || ""} onChange={props.handleChange} /><br />
        Year:  <input type="text" name="year" value={props.item.year || ""} onChange={props.handleChange} /><br />
        Color: <input type="text" name="color" value={props.item.color || ""} onChange={props.handleChange} /><br />
        Price: <input type="text" name="price" value={props.item.price || ""} onChange={props.handleChange} /><br />
      </form>
      <button name="save" onClick={props.saveItem}>Save</button>&nbsp;
      <button name="clear" onClick={props.clearForm}>Clear</button>&nbsp;
      <button name="delete" onClick={props.deleteItem}>Delete</button>&nbsp;
    </div>
  
}

const CarApp = (props) => {
  const [items, setItems] = React.useState([]);
  const [currentItem, setCurrentItem] = React.useState({});

  // load data after component has rendered
  React.useEffect(() => {
            const fetchData = async () => {
                fetch("/api/cars").then(res => res.json())
                .then((json) => {
                    setItems(json);
                })
            }
            fetchData()
        }, []);

  // list click event handler
  const selectItem = (event) => {
    const found = items.find((item) => {
      return item._id === event.target.id;

    });

    setCurrentItem(found);
  };

  const clearForm = () => {
    setCurrentItem({});
  }


  const saveItem = () => {
            if (!currentItem.make) {
              return;
            }
            fetch("/api/add/", {
              method: "POST",
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify(currentItem)
            })
            .then(res => res.json())
            .then((data) => {
                // if item has no _id, it wasn't previously saved in DB
                if (!currentItem._id) {
                    currentItem._id = data._id;
                    setCurrentItem(currentItem);
                    // update items list
                    let newItems = [...items];
                    newItems.push(currentItem);
                    setItems(newItems);
                }
            })
        }

        const deleteItem = () => {
            let id = currentItem._id;
            // delete item from DB
            fetch(`/api/delete/${id}`)
            .then(res => res.json())
            .then((data) => {
                // remove item from UI list
                  const newItems = items.filter((item) => {
                    return item._id !== id;
                  });
              setItems(newItems);
              // clear form
              setCurrentItem({})
            });
        }

  // update list state
  const handleChange = (event) => {
    let newItem = { ...currentItem };
    newItem[event.target.name] = event.target.value;
    // update currentItem state
    setCurrentItem(newItem);
    // update list state
    items.find((item, index) => {
            if (item._id == newItem._id) {
                items[index] = newItem;
                setItems(items);
            }
          })
        }

        return (
            <div> <h2>Cars Inventory</h2>
                <Car data={items} clickHandler={selectItem} />
                <ItemDetail
                  item={currentItem}
                  handleChange={handleChange}
                  clearForm={clearForm}
                  saveItem={saveItem}
                  deleteItem={deleteItem}
                />
            </div>
        );

    }
    

const container = document.getElementById('root');
const root = ReactDOM.createRoot(container);
root.render( <CarApp />);

</script>
</body>
</html> 


<!-- Assignment_6 -->
<!-- <!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8" />
  <title>React</title>
  <script src="https://unpkg.com/react@18/umd/react.development.js"></script>
  <script src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
  <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
</head>
<body>
  <h2>Cars Inventory</h2>
  <div id="root"></div>
  <script type="text/babel">
        const divStyle = { color: 'blue', backgroundColor: 'yellow' };

        const cars = <%- items %>;

    const Cars = (props) => {
      const listItems = props.items.map((item) => (
        <li key={item.make} onClick={() => props.clickHandler(item)}>
          {item.make}
        </li>
      ));
      return <ul>{listItems}</ul>;
    };

    const Detail = (props) => {
      return (
        <div>
          <h3>Cars Details</h3>
          {props.item && (
            <form>
              Make: <input type="text" name="make" value={props.item.make || ""} onChange={props.handleChange} /><br />
              Model: <input type="text" name="model" value={props.item.model || ""} onChange={props.handleChange} /><br />
              Year: <input type="text" name="year" value={props.item.year || ""} onChange={props.handleChange} /><br />
              Color: <input type="text" name="color" value={props.item.color || ""} onChange={props.handleChange} /><br />
              Price: <input type="text" name="price" value={props.item.price || ""} onChange={props.handleChange} /><br />
              <button name="clear" onClick={props.clearForm}>Clear</button>&nbsp;
            </form>
          )}
        </div>
      );
    };

    const MyApp = () => {
      const [items, setItems] = React.useState([]); // Initialize with an empty array or fetch from an API
      const [selectedItem, setSelectedItem] = React.useState();

      const itemClicked = (item) => {
        console.log('itemClicked')
        setSelectedItem(item);
      };

      const itemChanged = (e) => {
        const field = e.target.name; // Use the "name" attribute of the input field
        const newItem = { ...selectedItem, [field]: e.target.value };
        const newItems = items.map(item => item.make === newItem.make ? newItem : item);
        setItems(newItems);
        setSelectedItem(newItem);
      };

      const clearForm = () => {
        setSelectedItem(null);
      };

      return (
        <div>
          <Cars items={cars} clickHandler={itemClicked} />
          <hr />
          <Detail item={selectedItem} handleChange={itemChanged} clearForm={clearForm} />
        </div>
      );
    };
    const container = document.getElementById('root');
    const root = ReactDOM.createRoot(container);
    root.render(<MyApp />);
  </script>
</body>
</html>




 -->
